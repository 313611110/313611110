# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        # 建立值到索引的映射
        inorder_index_map = {val: idx for idx, val in enumerate(inorder)}

        def helper(pre_left: int, pre_right: int, in_left: int, in_right: int) -> Optional[TreeNode]:
            if pre_left > pre_right:
                return None

            # 根節點值
            root_val = preorder[pre_left]
            root = TreeNode(root_val)

            # 在中序中找到根的位置
            in_root_index = inorder_index_map[root_val]

            # 左子樹節點個數
            left_subtree_size = in_root_index - in_left

            # 遞迴構建左右子樹
            root.left = helper(pre_left + 1, pre_left + left_subtree_size, in_left, in_root_index - 1)
            root.right = helper(pre_left + left_subtree_size + 1, pre_right, in_root_index + 1, in_right)

            return root

        return helper(0, len(preorder) - 1, 0, len(inorder) - 1)
