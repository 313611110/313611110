from collections import defaultdict

class Solution:
    def sumOfDistancesInTree(self, n: int, edges: list[list[int]]) -> list[int]:
        tree = defaultdict(list)
        for u, v in edges:
            tree[u].append(v)
            tree[v].append(u)

        res = [0] * n         # res[i]: sum of distances from node i
        count = [1] * n       # count[i]: number of nodes in subtree rooted at i (including i)

        # Post-order DFS: compute count and res[0]
        def dfs1(node, parent):
            for child in tree[node]:
                if child != parent:
                    dfs1(child, node)
                    count[node] += count[child]
                    res[node] += res[child] + count[child]

        # Pre-order DFS: compute res[i] for all other i based on res[0]
        def dfs2(node, parent):
            for child in tree[node]:
                if child != parent:
                    res[child] = res[node] - count[child] + (n - count[child])
                    dfs2(child, node)

        dfs1(0, -1)
        dfs2(0, -1)
        return res

