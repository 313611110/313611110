# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        # 計算長度
        def getLength(node):
            length = 0
            while node:
                length += 1
                node = node.next
            return length

        # 反轉從 head 開始的 k 個節點，回傳 new_head, new_tail, next_segment_head
        def reverseKNodes(head, k):
            prev = None
            curr = head
            while k:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
                k -= 1
            return prev, head, curr

        dummy = ListNode(0)
        dummy.next = head
        group_prev = dummy
        node = head
        length = getLength(head)

        while length >= k:
            new_head, new_tail, next_node = reverseKNodes(node, k)
            group_prev.next = new_head
            new_tail.next = next_node

            group_prev = new_tail
            node = next_node
            length -= k

        return dummy.next
        